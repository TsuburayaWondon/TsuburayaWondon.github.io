<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git远程仓库</title>
      <link href="/2023-05-10-Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html"/>
      <url>/2023-05-10-Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html</url>
      
        <content type="html"><![CDATA[<h3 id="🤗背景">🤗背景</h3><ul><li>我们前面介绍的所有Git操作都是基于本地仓库进行的，但是如果我们想和其他项目进行协同开发，远程仓库能极大提高我们的效率。</li><li>远程仓库是什么？<br>远程仓库是指托管在因特网或者其他网络上的你的项目的版本库。</li><li>远程仓库不一定在“远程”<br>你完全可以在一个“远程”仓库上工作，而它实际上在本地，“远程”的含义更多的是指“别处”。</li><li>有哪些远程仓库？<br>我们使用较多的是：<a href="https://github.com/">GitHub</a>，<a href="https://gitee.com/">Gitee</a><br><img src="https://img1.imgtp.com/2023/05/04/nsSMzltJ.png" alt="Snipaste_2023-05-04_20-02-17.png"><br><img src="https://img1.imgtp.com/2023/05/04/OeH6cFyo.png" alt="Snipaste_2023-05-04_20-02-06.png"></li></ul><h3 id="🤗远程仓库的使用（以下操作都基于Gitee）">🤗远程仓库的使用（以下操作都基于Gitee）</h3><h4 id="添加远程仓库">添加远程仓库</h4><ul><li>打开Gitee官网（注册账号就不演示了），新建一个仓库<br><img src="https://img1.imgtp.com/2023/05/04/DDHCBG0b.png" alt="Snipaste_2023-05-04_20-18-47.png"><br><img src="https://img1.imgtp.com/2023/05/04/KPMfomr7.png" alt="Snipaste_2023-05-04_20-24-08.png"></li><li>建好仓库后会自动跳转至仓库的初始化界面，复制框起来的地方的链接（仓库的地址）<br><img src="https://img1.imgtp.com/2023/05/04/nApYfd4D.png" alt="Snipaste_2023-05-04_20-26-42.png"></li></ul><h4 id="链接远程仓库与本地仓库">链接远程仓库与本地仓库</h4><ul><li>添加仓库  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/04/vHKtovT8.png" alt="Snipaste_2023-05-04_20-36-47.png"></li><li>查看远程仓库  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">$ git remote -v # 获取更详细输出</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/04/FTzkYbzK.png" alt="Snipaste_2023-05-04_20-41-34.png"></li></ul><h4 id="推送文件至远程仓库">推送文件至远程仓库</h4><ul><li>推送文件到远程仓库的某一分支（输入指令后会弹出窗口，登录gitee账号）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/04/eiVQd2Od.png" alt="Snipaste_2023-05-04_20-48-14.png"><br>输入用户名（一般为手机号）和密码后（只有第一次需要，第一次输入后信息会保存在Windows凭据中），推送成功<br><img src="https://img1.imgtp.com/2023/05/04/gu4MvILl.png" alt="Snipaste_2023-05-04_20-52-47.png"><br>可以看到文件已推送至远程仓库<br><img src="https://img1.imgtp.com/2023/05/04/IzAukP7J.png" alt="Snipaste_2023-05-04_20-55-30.png"></li></ul><h4 id="从远程仓库拉取内容">从远程仓库拉取内容</h4><ul><li>使用下面的指令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt;</span><br><span class="line">$ git pull &lt;remote&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/04/msZjLWrp.png" alt="Snipaste_2023-05-04_21-07-51.png"><br><img src="https://img1.imgtp.com/2023/05/04/DqfX4aaz.png" alt="Snipaste_2023-05-04_21-08-20.png"></li></ul><h4 id="远程仓库的重命名与移除">远程仓库的重命名与移除</h4><ul><li>重命名<ul><li>首先查看当前已有的远程仓库  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/05/P1504Geh.png" alt="Snipaste_2023-05-05_20-07-45.png"></li><li>可以看到仅有一个，使用下面的指令为它改名  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename &lt;old&gt; &lt;new&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/05/jTKA1onz.png" alt="Snipaste_2023-05-05_20-20-34.png"></li><li>再次使用<code>git remote -v</code>指令查看，可以看到改名已完成<br><img src="https://img1.imgtp.com/2023/05/05/R16QfS69.png" alt="Snipaste_2023-05-05_20-21-39.png"></li></ul></li><li>移除<ul><li>使用下面指令，再使用<code>git remote -v</code>指令查看，可以看到输出为空，远程仓库已移除  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote remove &lt;name&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/05/ptLfnvXN.png" alt="Snipaste_2023-05-05_20-24-16.png"></li></ul></li></ul><h4 id="删除远程仓库的文件">删除远程仓库的文件</h4><ul><li>查看远程仓库文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-tree &lt;tree-ish&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/06/vVn8K5kV.png" alt="Snipaste_2023-05-06_13-42-48.png"><br><img src="https://img1.imgtp.com/2023/05/06/CHqoQkTO.png" alt="Snipaste_2023-05-06_13-43-33.png"></li><li>选择删除文件01.txt，加上<code>--cached</code>选项保留本地文件<br><img src="https://img1.imgtp.com/2023/05/06/zsfOaCxZ.png" alt="Snipaste_2023-05-06_13-45-10.png"></li><li>提交删除记录<br><img src="https://img1.imgtp.com/2023/05/06/56BnRfTG.png" alt="Snipaste_2023-05-06_13-46-26.png"></li><li>上传删除到远程仓库<br><img src="https://img1.imgtp.com/2023/05/06/cmMMsDiw.png" alt="Snipaste_2023-05-06_13-47-54.png"></li><li>再次查看远程仓库文件，01.txt已经被成功删除<br><img src="https://img1.imgtp.com/2023/05/06/qjWlmlPm.png" alt="Snipaste_2023-05-06_13-48-40.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023-05-10-hello-world.html"/>
      <url>/2023-05-10-hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客测试文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客测试文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git起步</title>
      <link href="/2023-05-09-Git%E8%B5%B7%E6%AD%A5.html"/>
      <url>/2023-05-09-Git%E8%B5%B7%E6%AD%A5.html</url>
      
        <content type="html"><![CDATA[<h3 id="🤗背景">🤗背景</h3><h4 id="什么是版本控制">什么是版本控制</h4><ul><li>版本控制是一种记录一个或若干个文件内容变化，以便将来查询特定版本修订情况的系统。</li><li>举个例子，我们做一个项目，从一开始的构思到最后的完成肯定要经历不少对项目文件的修改、重写、移动、分类等等操作，当然，我们在做这些操作时不可能百分之百能一次就达到预期的效果，很有可能我们在做完一次修改时发现其实<strong>之前</strong>的思路更好，然后需要回到文件<strong>之前的那个版本</strong>，这个时候，你大概就能体会到版本控制的作用了。</li></ul><h4 id="版本控制系统分类">版本控制系统分类</h4><ol><li>原始版本控制<br>这是一种最简单的版本的控制方式，就是将文件复制一份，并在它的名字中加上版本信息。但是这种方式特别容易犯错，尤其在文件数量或者版本数众多的情况下，很可能你都分不清自己正在改的是哪一个版本😿。如下图，使用时间来做版本区分：<br><img src="https://s1.ax1x.com/2023/04/27/p9QcCq0.png" alt="p9QcCq0.png"></li><li>本地版本控制系统<br>本地版本控制系统采用某种简单的数据库来保存文件的历次更新差异。其中最流行的一种叫RCS，RCS通过在硬盘上保存<strong>补丁集（文件修订前后的变化）</strong>，然后根据补丁，可以重新计算出各个版本的内容。图示如下：<br><img src="https://s1.ax1x.com/2023/04/28/p9l4wQS.png" alt="p9Q67rt.png"></li><li>集中化的版本控制系统<br>采用单一的、集中管理的服务器，每个人都通过客户端连到这台服务器，从服务器上获取最新的文件或提交更新。这种方式优缺点都很明显，优点就是支持多用户协作，缺点就是不能离线工作，而且如果中心数据库所在磁盘损坏有没有做恰当备份，毫无疑问会失去所有记录。本地版本控制系统也有类似风险。图示如下：<br><img src="https://s1.ax1x.com/2023/04/28/p9l4gJ0.png" alt=""></li><li>分布式版本控制系统<br>类似集中版本控制系统，但是客户端并不是仅仅保存最新的文件快照，而是把代码仓库<strong>完整地镜像</strong>下来，包括完整的历史纪录。这样一来，任何一处协同工作的服务器发生故障，时候都可以用任何一个镜像出来的本地仓库恢复。此外，许多这类系统都能和不同的远程代码仓库进行交互。图示如下：<br><img src="https://s1.ax1x.com/2023/04/28/p9l4HF1.png" alt=""></li></ol><h3 id="🤗Git简述">🤗Git简述</h3><blockquote><p>Git的诞生与Linux密不可分，2005年，开发BitKeeper（一种版本控制系统）的商业公司同Linux开源社区的合作关系结束，他们收回了Linux开源社区免费试用BitKeeper的权利，这迫使Linux开源社区（尤其是Linux创始人Linus Torvalds）基于BitKeeper的经验教训开发出自己的版本控制系统。他们对新系统提出了若干要求：</p></blockquote><ul><li>速度</li><li>简单的设计</li><li>对<strong>非线性</strong>开发模式的强力支持（允许成千上万个并发的分支）</li><li><strong>完全分布式</strong></li><li>有能力高效管理Linux内核那样的超大规模项目（速度和数据量）</li></ul><blockquote><p>然后，在2005年4月，Git正式诞生了！</p></blockquote><h4 id="Git的特点">Git的特点</h4><blockquote><p>Git是一种<strong>分布式</strong>的版本控制系统，虽然前面已经介绍了分布式版本控制系统的特点，但是我们既然专注于学习Git，所以这里还是有必要单独介绍下<strong>Git的特点</strong>。</p></blockquote><ol><li><p><strong>记录快照，而非差异</strong></p><ul><li>下图为记录差异的版本控制系统图示：<br><img src="https://s1.ax1x.com/2023/04/28/p9lhx5q.png" alt=""></li><li>快照（snapshot）是指一个<strong>特定时刻</strong>的文件或目录状态的<strong>完整</strong>拷贝。</li><li>在Git中，每当<strong>你提交或保存</strong>状态项目时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。</li><li>但是如果对文件进行<strong>修改</strong>时，为了节省空间，Git采取了增量存储的方式，仅将<strong>文件之间的差异</strong>保存，如果文件内容没有发生改变，Git不会再重新存储该文件，而是只保留一个链接指向之前的文件。</li><li>有时候我们比较容易搞混，Git保存“完整的快照”和“增量存储”是否自相矛盾？但是请你记住，我们提交到Git仓库的所有文件都是完整记录的快照，增量存储仅发生在<strong>文件被修改</strong>的过程中。别担心Git保存完整的快照会占用大量空间，Git使用了“压缩存储”，“垃圾回收”还有高效的存储结构来尽可能地使Git占用更少的空间。<br>下图为Git记录快照的图示：<br><img src="https://s1.ax1x.com/2023/04/28/p9l4CxU.png" alt=""></li></ul></li><li><p><strong>近乎所有操作都是本地执行</strong></p><ul><li>这是Git作为分布式版本控制系统的特点，在本地我们就有项目的完整历史，没必要刻意去从远程服务器上拉取。这大大保证了Git的速度。</li></ul></li><li><p><strong>Git保证完整性</strong></p><ul><li>Git中<strong>所有的数据</strong>在存储前都会计算校验和，然后以校验和来引用。Git数据库中保存的信息都是以文件内容的校验和来索引，而不是文件名。<br><img src="https://s1.ax1x.com/2023/04/28/p9lI2KU.png" alt=""><br>且看ChatGPT的回答<br><img src="https://img1.imgtp.com/2023/05/05/gEA1DWjc.png" alt="Snipaste_2023-05-05_11-02-44.png"><br><img src="https://img1.imgtp.com/2023/05/05/MRHnraDa.png" alt="Snipaste_2023-05-05_11-31-50.png"></li></ul></li><li><p><strong>Git一般只添加数据</strong></p><ul><li>我们执行的Git操作，几乎只往Git数据库中添加数据，你很难使用Git从数据库中删除数据。</li></ul></li><li><p><strong>Git的三种状态</strong><br>使用Git管理的文件可能有三种状态：</p><ul><li>已修改（modified）：表示已修改文件，但还未保存到数据库中</li><li>已暂存（staged）：表示对文件当前版本进行了标记，使之包含在下次提交的快照中</li><li>已提交（committed）：表示数据已经安全地保存在本地数据库中</li></ul><p>这会让我们的Git项目有三个阶段：</p><ul><li>工作区</li><li>暂存区</li><li>Git目录（仓库）<br><img src="https://s1.ax1x.com/2023/04/28/p9lTif1.png" alt=""></li></ul></li><li><p>命令行</p><ul><li>Git自带Git Bash终端（可以到Git安装目录下找到它，可以把它固定到“开始菜单栏”或者在桌面给它建一个快捷方式），以下所有指令均在命令行下完成。它看起来是这样的：<br><img src="https://img1.imgtp.com/2023/04/28/deYcoNXs.png" alt="Snipaste_2023-04-28_18-35-33.png"></li></ul></li></ol><h4 id="安装Git（Windows环境下）">安装Git（Windows环境下）</h4><ul><li>去官网下载安装程序，官网：<a href="https://git-scm.com/download/win">点我跳转</a><br><img src="https://s1.ax1x.com/2023/04/28/p9lTHBD.png" alt=""></li><li>下载完成后打开安装程序，直接点next<br><img src="https://s1.ax1x.com/2023/04/28/p9l7WqS.png" alt=""></li><li>选择安装目录，然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9l7hVg.png" alt=""></li><li>选择Git配套组件，自选需要的，不想细看可以直接使用默认，然后点击next<br><img src="https://s1.ax1x.com/2023/04/28/p9l772q.png" alt=""></li><li>选择在开始菜单中Git程序文件夹的名称和位置（默认或者自定义都可），然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9l7jZF.png" alt=""></li><li>选择默认编辑器，根据自己电脑来，推荐vscode，选好后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9lHKzt.png" alt=""></li><li>设置初始主分支的名字，然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9lHreU.png" alt=""></li><li>配置PATH环境变量<ul><li>“Git from the command line only”: 仅将Git添加到命令行中，不允许第三方软件调用 Git</li><li>“Git from the command line and also from 3rd-party software”: 将Git添加到命令行中，并允许第三方软件调用Git</li><li>“Use Git and optional Unix tools from the command prompt”: 将Git添加到命令行中，并安装一些类 Unix 工具，如grep、awk和sed</li><li>推荐第二个，选好然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9lHfQx.png" alt=""></li></ul></li><li>选择SSH可执行文件，默认即可（如果电脑上安装了多个SSH，可以自选路径）然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9lHbYd.png" alt=""></li><li>选择HTTPS传输后端，默认即可，然后点next<br><img src="https://s1.ax1x.com/2023/04/28/p9lHzm8.png" alt=""></li><li>配置行尾换行符，可以按喜好来选，不过一般选第一个，next<br><img src="https://img1.imgtp.com/2023/04/28/o4KREA0p.png" alt=""><br><img src="https://img1.imgtp.com/2023/05/05/aegRmmJ5.png" alt="Snipaste_2023-05-05_11-58-12.png"></li><li>选择终端模拟器来运行git bash命令行界面，默认选项是Git自带的终端模拟器，如果你更喜欢Windows风格的，可以选它，选好后点next<br><img src="https://img1.imgtp.com/2023/04/28/4FzmLFT8.png" alt="Snipaste_2023-04-28_18-00-22.png"></li><li>选择在执行git pull指令时合并远程分支和本地分支的方式，直接默认即可（以后还会提到的），然后点next<br><img src="https://img1.imgtp.com/2023/04/28/WnoRvGZV.png" alt="Snipaste_2023-04-28_18-00-42.png"></li><li>选择一个凭证助手，凭证助手可以帮助我们缓存 Git 仓库的凭据，以便不必在每次与远程仓库进行通信时都要输入用户名和密码（以后还会提到），这里直接选默认的，然后点next<br><img src="https://img1.imgtp.com/2023/04/28/5m8aZmEs.png" alt="Snipaste_2023-04-28_18-03-09.png"></li><li>是否允许文件系统缓存，如果不开启缓存，Git会在需要访问文件时每次直接从磁盘中读取，但是如果允许缓存，Git会将文件缓存到内存中，以便下次访问时可以更快地读取。直接选默认即可（这不会占用太多空间），然后点next<br><img src="https://img1.imgtp.com/2023/04/28/ulrxuLJP.png" alt="Snipaste_2023-04-28_18-03-30.png"></li><li>这是一些实验性的Git选项，一般供想要测试Git的最新功能或者参与Git的开发工作的人员使用，普通使用不需要选，点击Install开始安装吧<br><img src="https://img1.imgtp.com/2023/04/28/uVq27Mxh.png" alt="Snipaste_2023-04-28_18-05-57.png"></li><li>等待…安装完成！最后点Finish退出<br><img src="https://img1.imgtp.com/2023/04/28/L8iYghLo.png" alt="Snipaste_2023-04-28_18-06-44.png"><br><img src="https://img1.imgtp.com/2023/04/28/CaTlXQMY.png" alt="Snipaste_2023-04-28_18-07-50.png"></li></ul><h3 id="🤗Git使用前配置">🤗Git使用前配置</h3><h4 id="Git-Bash使用">Git Bash使用</h4><p>前面提到Git采用命令行方式接受指令工作，我们可以在Git安装目录下找到它，如果我们上面选了将Git添加到“开始”菜单的话，可以直接在“开始”菜单找到它，点击Git Bash即可<br><img src="https://img1.imgtp.com/2023/05/05/rcn19ztk.png" alt="Snipaste_2023-05-05_12-32-08.png"></p><h4 id="git-configure修改Git配置">git configure修改Git配置</h4><ul><li><p>Git自带一个叫git config的工具来帮助设置控制Git外观、行为的控制变量。这些变量存在三个不同的位置。</p><ul><li><strong><code>Git安装目录\\etc\\gitconfig</code>文件</strong>：包含系统上每一个用户以及他们仓库的通用配置。如果需要修改它，在执行git config时要同时带上<code>--system</code>选项。</li><li><strong><code>C:\\Uers\\$USER\\.gitconfig</code>文件</strong>：只针对当前用户。如果需要修改它请带上<code>--global</code>选项。</li><li><strong><code>当前仓库所在目录\\.git\\config</code></strong>：只针对当前仓库。如果需要修改它（需要先进入仓库）请带上<code>--local</code>选项（当然默认就是它，所以也可以直接不带哦）。</li><li>注意：每一个级别会覆盖上一级别的配置！</li></ul><p>我们可以通过以下指令来查看所有配置以及他们所在的文件：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list --show-origin</span><br></pre></td></tr></table></figure><p>这是我电脑上的配置信息（部分）<br><img src="https://img1.imgtp.com/2023/04/28/ipbQjl6V.png" alt=""></p><p>现在我们来修改一下基本的用户信息<br><img src="https://img1.imgtp.com/2023/04/28/7V2UGRbW.png" alt="Snipaste_2023-04-28_18-41-05.png"></p><p>可以通过<code>git config &lt;key&gt;</code>来查看Git的某一项配置<br><img src="https://img1.imgtp.com/2023/04/28/fNqAZWCj.png" alt="Snipaste_2023-04-28_18-42-34.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础指令</title>
      <link href="/2023-05-09-Git%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4.html"/>
      <url>/2023-05-09-Git%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<h3 id="🤗获取Git仓库">🤗获取Git仓库</h3><ul><li>通常我们有两种获取Git仓库的方式：<ol><li>将尚未进行版本控制的<strong>本地目录</strong>转换为Git仓库。</li><li>从其他服务器<strong>克隆</strong>一个已存在的Git仓库。</li></ol></li></ul><h4 id="在已存在的目录中初始化仓库">在已存在的目录中初始化仓库</h4><ol><li>打开Git Bash并输入下面的指令 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 目录地址（分隔符记得用双反斜杠&quot;\\&quot;）</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/04/30/qvkY6PhR.png" alt="IOZ_41A4_NX1M5T6IW3R6C0.png"><br>当然，如果你觉得上面的方式太麻烦，其实也可以这样：<br><img src="https://img1.imgtp.com/2023/04/30/bgnbW7dJ.png" alt="Snipaste_2023-04-30_11-42-18.png"><br>选中一个文件夹，鼠标右击，点击“显示更多选项”，然后在出现列表中点“Git Bash Here”即可。</li><li>然后在当前目录下会出现一个叫.git的文件夹（前面我们已经提到过这个文件夹下的config目录），这个文件夹具体的作用并不需要太了解，你只需要知道这里面保存了Git仓库的骨干文件。在windows的文件资源管理器中，你甚至看不到这个文件，因为这是一个隐藏文件（它至关重要，谨防你误改了它）<br><img src="https://img1.imgtp.com/2023/04/30/g43pGiy9.png" alt="Snipaste_2023-04-30_09-30-10.png"><br>当然其实也可以通过下面的方式让它现身，不过你只需要知道它存在就好了，最好还是<strong>不要</strong>让它显式地出现！<br><img src="https://img1.imgtp.com/2023/04/30/e41DklOT.png" alt="Snipaste_2023-04-30_09-31-55.png"><br><img src="https://img1.imgtp.com/2023/04/30/xvSEroVB.png" alt="Snipaste_2023-04-30_09-46-22.png"></li></ol><h4 id="克隆现有的仓库">克隆现有的仓库</h4><blockquote><p>如果你想获得一份已经存在的Git仓库的拷贝，比如说你想为某个开源项目做贡献，或者单纯想学习别人的项目，就需要用到<strong>克隆指令</strong><code>git clone</code>。记住我们前面所说的，当你执行克隆时，你会将文件所有的版本以及历史记录完整的拉取到本地。<br>输入下列指令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;repo&gt; [&lt;dir&gt;]</span><br></pre></td></tr></table></figure><p>repo指的是仓库（repository）的地址，如下图，我在gitee（基于Git的一个远程仓库，后续再详细介绍）找到一个12306抢票的开源项目，复制它的克隆链接。dir指目录名，克隆仓库的名字默认与远程仓库相同，但是你可以在后面加上你想要让它叫的名。（注意：当使用<strong>方括号</strong>时，表示括号内的内容为<strong>可选</strong>项，而<strong>尖括号</strong>表示<strong>必须替换</strong>为实际的值！）<br><img src="https://img1.imgtp.com/2023/04/30/5gEn7y9l.png" alt="Snipaste_2023-04-30_10-23-57.png"><br>然后来到Git Bash输入指令<br><img src="https://img1.imgtp.com/2023/04/30/EHe6Ge5i.png" alt="Snipaste_2023-04-30_10-28-11.png"><br>就会看到，这个项目到了我们的本地<br><img src="https://img1.imgtp.com/2023/04/30/wcJTFOo4.png" alt="Snipaste_2023-04-30_10-29-43.png"><br><img src="https://img1.imgtp.com/2023/04/30/X6b5PW1q.png" alt="Snipaste_2023-04-30_10-30-17.png"></p><h3 id="🤗记录每次更新到仓库">🤗记录每次更新到仓库</h3><blockquote><p>通过上面的操作，我们有了一个Git本地仓库。通常，我们需要创建文件，对这些文件做出修改，同时每当我们完成了一个阶段的目标，想要记录下它时，就将它提交到仓库。</p></blockquote><ul><li>注意，工作目录下的所有文件无外乎两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>。已跟踪的是指那些已经纳入版本控制的文件，在上一次快照中有它们的记录。未跟踪的就是除已跟踪文件外的所有文件。</li><li>工作一段时间后，它们的状态可能是：<strong>未修改，已修改</strong>或者<strong>已暂存</strong>（上篇提到过）。</li><li>简而言之，已跟踪的文件就是Git已经知道的文件。打个比方，在我们新初始化的一个本地仓库里，本地仓库里原有的文件都会被纳为未修改的范畴，此时，你再新建一个文件，就是未跟踪的，然后对未修改的文件，在后续操作中它们可能变成已修改或已暂存。如此循环反复。</li></ul><p><img src="https://img1.imgtp.com/2023/04/30/pRU5oFLf.png" alt="Snipaste_2023-04-30_11-34-32.png"></p><h4 id="查看初始状态">查看初始状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/04/30/ZkRCg2Fk.png" alt="Snipaste_2023-04-30_11-46-50.png"><br>如果显示结果的是上图这样，说明文件夹干净得不能再干净了😂。</p><h4 id="跟踪文件">跟踪文件</h4><ul><li>输入下面的指令创建文件并添加内容“My Project”  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;My Project&quot; &gt; README</span><br></pre></td></tr></table></figure></li><li>跟踪文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure>如果出现了下面的情况请别担心<br><img src="https://img1.imgtp.com/2023/04/30/BPD9Nhd0.png" alt="Snipaste_2023-04-30_11-39-46.png"><br>且看ChatGPT的回答<br><img src="https://img1.imgtp.com/2023/04/30/bQNvs8q3.png" alt="Snipaste_2023-04-30_12-01-41.png"><br><img src="https://img1.imgtp.com/2023/04/30/V0Mgt8Zq.png" alt="Snipaste_2023-04-30_12-02-54.png"></li><li>再次使用<code>git status</code>指令，你会发现文件已经成功被跟踪并且处于暂存状态<br><img src="https://img1.imgtp.com/2023/04/30/OQZRRfEW.png" alt="Snipaste_2023-04-30_16-01-06.png"><br>可以看到<strong>be committed</strong>（已暂存）</li><li>将修改后的文件添加至暂存区<br>对文件进行修改时，文件会被<strong>拷贝</strong>一份到工作区，我们修改的并不是暂存区内的文件而是拷贝出来的这份，我们来看看。现在我将README的内容稍改，再重新保存，再使用<code>git status</code>指令<br><img src="https://img1.imgtp.com/2023/04/30/T9oydHso.png" alt="Snipaste_2023-04-30_16-23-43.png"><br>可以看到<strong>new file</strong>和<strong>modified</strong>（已修改）的标记共存<br>再次使用<code>git add README</code>指令（这个指令有多种作用，添加跟踪，把已跟踪的文件添加至暂存区）。<code>git status</code>查看状态如下，这时显示如下<br><img src="https://img1.imgtp.com/2023/04/30/h11r2Usw.png" alt="Snipaste_2023-04-30_16-17-59.png"><br>你可能会疑惑为什么又只有一个了，且看ChatGPT的回答<br><img src="https://img1.imgtp.com/2023/04/30/LyTgIZaP.png" alt="Snipaste_2023-04-30_16-32-32.png"></li></ul><h4 id="提交更新">提交更新</h4><ul><li>普通提交  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit [-m &lt;message&gt;]</span><br></pre></td></tr></table></figure>message表示提交信息，如果你不写方括号内的内容，在输入指令并按下enter后会自动打开你的Git默认编辑器让你输入提交信息，当然这样比较麻烦，直接加上-m选项吧<br><img src="https://img1.imgtp.com/2023/04/30/CgIp1qwk.png" alt="Snipaste_2023-04-30_17-39-09.png"></li><li>跳过暂存区直接提交<br>尽管暂存区的存在让我们更方便准备要提交的文件，但有时候这么做略显繁琐，我们可以在<code>git commit</code>后加上-a选项，这样Git就会自动把所有已经跟踪过的文件暂存起来一起提交。</li><li>查看提交记录可以使用下面指令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/04/30/dQ5NJqYw.png" alt="Snipaste_2023-04-30_17-44-34.png"></li></ul><h4 id="撤销操作">撤销操作</h4><ul><li><p>撤销提交<br>有时候我们提交完更新可能突然发现提交信息不太对或者忘了几个文件未提交，这时就需要用到下面的指令撤销上一次的提交</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>输入这条指令后，会自动打开我们的编辑器，修改提交信息重新保存就会自动重新提交。最后你会发现只有一条修改后的记录。</p><ul><li>创建两个c文件，使用<code>git status</code>查看状态如下<br><img src="https://img1.imgtp.com/2023/05/04/NdTnesK6.png" alt="Snipaste_2023-05-04_16-15-20.png"></li><li>提交其中一个<br><img src="https://img1.imgtp.com/2023/05/04/Ez0Tuxqm.png" alt="Snipaste_2023-05-04_16-17-44.png"></li><li>提交另一个c文件并且和上一次的提交共占一条记录<br><img src="https://img1.imgtp.com/2023/05/04/IOHl6K1h.png" alt="Snipaste_2023-05-04_16-20-55.png"></li><li>查看记录，果然只有一条<br><img src="https://img1.imgtp.com/2023/05/04/p4r94glF.png" alt="Snipaste_2023-05-04_16-21-35.png"></li></ul></li><li><p>取消暂存的文件<br>需要用到指令</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li>创建两个文本文件<br><img src="https://img1.imgtp.com/2023/05/04/7Ldh1Vzd.png" alt="Snipaste_2023-05-04_16-28-24.png"></li><li>全部添加至暂存区<br><img src="https://img1.imgtp.com/2023/05/04/Op8wBK7U.png" alt="Snipaste_2023-05-04_16-30-20.png"></li><li>取消对其中一个文件的暂存<br><img src="https://img1.imgtp.com/2023/05/04/0sBXP2Zq.png" alt="Snipaste_2023-05-04_16-32-23.png"></li><li>还可以用下面的指令（git 2.23版本之后新增的指令），效果和上面完全相同，<code>git reset</code>还有更多的用法，而<code>git restore</code>单纯得多，只能用于撤销暂存  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git restore --staged &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>撤销暂存区文件的修改</p><p>注意，这里说的“撤销撤销暂存区文件的修改”是指将暂存区的文件回退到工作区并恢复到上一个版本，需要用到下面的指令</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li>修改02.txt的内容后使用<code>git checkout -- 02.txt</code>指令<br><img src="https://img1.imgtp.com/2023/05/04/kGZAV7Tu.png" alt="Snipaste_2023-05-04_17-50-43.png"></li><li>查看状态，会发现修改已被撤销<br><img src="https://img1.imgtp.com/2023/05/04/RuxH5ZCu.png" alt="Snipaste_2023-05-04_17-52-27.png"></li></ul></li></ul><h3 id="🤗其它">🤗其它</h3><h4 id="状态简览">状态简览</h4><ul><li>前面我们学了使用<code>git status</code>来查看工作目录的状态，它的输出十分详细，但有时候文件较多时会显得比较繁琐，所以可以使用<code>-s</code>或者<code>--short</code>选项来使输出更精简</li></ul><p><img src="https://img1.imgtp.com/2023/04/30/drWeDxzv.png" alt="Snipaste_2023-04-30_16-39-21.png"></p><ul><li>现在就输出了一句话，你会不会感到奇怪，上面的A和READEME隔得好像很开？嗯，其实，这里有两栏，左栏表示暂存区的状态，右栏表示工作区的状态，此时这个文件在暂存区（当然本质上来说只是一个副本），所以右栏为空。‘A’表示已暂存，此外’M’表示已修改，’？'表示未跟踪。根据这些符号可以很容易推出文件的状态。</li></ul><h4 id="状态复览">状态复览</h4><ul><li>“复”是指复杂哦。有时候你可能觉得<code>git status</code>的输出太简略，如果你想要更详细的输出，可以用<code>git diff</code>指令。直接的<code>git diff</code>用来比较工作区和暂存区之间的差异。<code>git diff (--cached|--stage)</code>比较暂存区和最近一次提交（提交到暂存区的提交）之间的差异。<br><img src="https://img1.imgtp.com/2023/04/30/7zMTQolz.png" alt="Snipaste_2023-04-30_17-20-10.png"><br><img src="https://img1.imgtp.com/2023/04/30/U9ib1xGV.png" alt="Snipaste_2023-04-30_17-24-12.png"></li></ul><h4 id="获取帮助">获取帮助</h4><ul><li>你可以使用下列三个等价的指令找到Git命令的综合手册</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git help &lt;command&gt;</span><br><span class="line">$ git &lt;command&gt; (--help|-h)</span><br><span class="line">$ man git-&lt;command&gt;</span><br></pre></td></tr></table></figure><ul><li>尖括号前面有介绍（表示必选），'|'表示或者（前后不能有空格）。</li></ul><p>下面我用这个指令来查clone的用法（只截了一部分）<br><img src="https://img1.imgtp.com/2023/04/30/YaS8e7yQ.png" alt="Snipaste_2023-04-30_16-55-54.png"></p><h4 id="忽略文件">忽略文件</h4><ul><li>一般我们总会有一些文件无需纳入Git的管理，也并不想它们总出现在未跟踪文件列表。这种情况下我们可以建一个名为.gitignore的文件，列出需要忽略的文件。</li><li>文件 .gitignore 的格式规范如下<br>• 所有空行或者以 # 开头的行都会被 Git 忽略。<br>• 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。<br>• 匹配模式可以以（/）开头防止递归。<br>• 匹配模式可以以（/）结尾指定目录。<br>• 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li></ul><h4 id="删除文件和移动文件">删除文件和移动文件</h4><ul><li>删除<strong>暂存区</strong>的文件<br>直接用下面指令会将文件从暂存区及工作目录同时删除（这个指令比较有风险，如果文件未被提交到仓库，就无法恢复了）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -f &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li>新建测试文件<br><img src="https://img1.imgtp.com/2023/05/05/lcmQ88n1.png" alt=""></li><li>跟踪测试文件（加入暂存区）<br><img src="https://img1.imgtp.com/2023/05/05/jjT2P1zm.png" alt="Snipaste_2023-05-05_21-51-24.png"></li><li>删除测试文件<br><img src="https://img1.imgtp.com/2023/05/05/ffhAVBJH.png" alt="Snipaste_2023-05-05_21-54-18.png"></li><li>若只想将文件从暂存区删除，可以加上<code>--cached</code>选项  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2023/05/06/1cPX1YCn.png" alt="Snipaste_2023-05-06_00-04-43.png"></li></ul></li><li>删除<strong>Git仓库</strong>里的文件<ul><li>添加测试文件到仓库<br><img src="https://img1.imgtp.com/2023/05/06/BObMMqCB.png" alt="Snipaste_2023-05-06_00-06-32.png"></li><li>使用<code>git rm</code>指令<br><img src="https://img1.imgtp.com/2023/05/06/1GMnXkRc.png" alt="Snipaste_2023-05-06_00-08-29.png"></li><li>使用<code>git status</code>指令查看状态<br>你可能会疑惑这个deleted标记，事实上<code>git rm</code>进行了<strong>两步</strong>操作：将仓库里的文件移至暂存区，删除本地目录的测试文件。既然Git将删除操作保存到了暂存区，这样你有两种选择，使用<code>git commit</code>提交删除，这样文件会被彻底删除，或者使用<code>git restore --staged</code>将文件移出暂存区，再使用<code>git restore</code>取消工作目录的删除<br><img src="https://img1.imgtp.com/2023/05/06/HbpcpJJP.png" alt="Snipaste_2023-05-06_00-09-52.png"><br>如下图，将测试文件从暂存区移除，再撤销工作目录的删除操作，这样，整个删除操作就完全撤销了<br><img src="https://img1.imgtp.com/2023/05/06/mKIMhDEy.png" alt="Snipaste_2023-05-06_00-22-02.png"><br><img src="https://img1.imgtp.com/2023/05/06/rFmh95fY.png" alt="Snipaste_2023-05-06_00-28-20.png"></li><li>重新回到下面的状态<br><img src="https://img1.imgtp.com/2023/05/06/HbpcpJJP.png" alt="Snipaste_2023-05-06_00-09-52.png"><br>这时选择提交删除到仓库，文件就会彻底没了<br><img src="https://img1.imgtp.com/2023/05/06/yzfj7uzg.png" alt="Snipaste_2023-05-06_00-32-04.png"></li></ul></li><li>移动文件<br>使用下面指令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv &lt;source&gt; &lt;destination&gt;</span><br></pre></td></tr></table></figure><ul><li>注意不能将文件移除Git工作目录<br><img src="https://img1.imgtp.com/2023/05/06/HQj4s8As.png" alt="Snipaste_2023-05-06_00-36-55.png"></li><li>如果将已被跟踪的文件移动到了未被跟踪的目录，该文件<strong>不需要</strong>重新跟踪<br><img src="https://img1.imgtp.com/2023/05/06/LNqpUE4O.png" alt="Snipaste_2023-05-06_00-43-51.png"><br><img src="https://img1.imgtp.com/2023/05/06/S7Mn6TY0.png" alt="Snipaste_2023-05-06_00-44-22.png"></li><li><code>git mv</code>还可以用于重命名文件<br><img src="https://img1.imgtp.com/2023/05/06/vV0TZ16t.png" alt="Snipaste_2023-05-06_00-48-21.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
